= 良いプロジェクトの作り方
//imagetalkl[mai_nutoral]{
じゃあ始めよう。まずプロジェクトについてだけどあきなちゃんはプロジェクトっていうものの定義って知ってるかな
//}

//imagetalkr[akina_nutoral]{
ええーっと、何かをみんなで作るそのための集まりとかそんなんじゃないですか
//}

//imagetalkl[mai_nutoral]{
おー、惜しいね。正しくは「定義された成果とそれを達成するための時間及び労働リソース」の総称。まあつまり目的と時間と労働力の三つが揃ったもので考えればいいね
//}

//imagetalkr[akina_nutoral]{
なるほど、人っていうものがそこまで定義されていないんですね
//}

//imagetalkl[mai_nutoral]{
まぁ結局仕事ができればいいから労働力っていう単位にしちゃえば働くのは人だしね
//}

//imagetalkr[akina_nutoral]{
そっか。そうですね
//}


//imagetalkl[mai_nutoral]{
んで、いいプロジェクトとはっていうところだけど結局は「成果のための時間を正しい労働力で働き切って正しい成果」を得るってことだね
//}

//imagetalkr[akina_ettu]{
正しいって言うとあまりピンと来ませんけど、早ければいいんじゃないですか
//}

//imagetalkl[mai_tohoho]{
それはちょっと難しいよね。早ければいいような気もするけど結局予算通り予定通りって言うほうがいろんなプロジェクトを発注するお客さんとしては扱いやすいんじゃないかな
//}

//imagetalkr[akina_nutoral]{
確かに急に終わっってしまっても 次のものが間に合わなければ無駄な時間が生まれてしまいますね
//}

//imagetalkl[mai_tohoho]{
そうそう。自分一人の荷物さえ予定通りに届いてもらわないと困るのに会社なんていう大きな単位でちょっと早くできましたって言われても困っちゃうよね
//}

//imagetalkr[akina_tahaha]{
うぅ・・なんとなく想像ができました
//}

//imagetalkl[mai_nutoral]{
そうだよねえ。じゃあ改めてだけど正しい成果を得るための正しい時間、これって一体誰が決めてると思う？
//}

//imagetalkr[akina_ettu]{
え、えーとお客さんですかね
//}

//imagetalkl[mai_nutoral]{
うん 最終的にはそうだね。でもお客さんが自分の要件だけを見てまっとうな時間を見立てられると思う？
//}

//imagetalkr[akina_nutoral]{
・・・厳しいと思います
//}

//imagetalkl[mai_nutoral]{
そうだよね。結局プロジェクトが回る時は事前に作り手側がこれぐらいかかりますという見積もりを作ってお客さんに OK をもらうっていう形になってるよね
//}

//imagetalkr[akina_nutoral]{
そうですね
//}

//imagetalkl[mai_nutoral]{
じゃあこの見積もりが間違っていたらどうなるか。それはそのままプロジェクトの失敗になる。
//}

//imagetalkr[akina_eee]{
そんなことになったら手を動かすプログラマーとかどうしようもないじゃないですか
//}

//imagetalkl[mai_nutoral]{
うん、そうだね。どうしようもないね。でも実際に現実世界で起きてきた出来事だった。
//}

//imagetalkr[akina_ugee]{
想像したくないです。
//}

//imagetalkl[mai_tohoho]{
ははは。 私もしたくないや。というところでこの正しい見積もりを作る方法、そしてその見積もり通りにプロジェクトを進めていく方法これらをまとめてプロジェクトマネジメントっていうんだ。
//}

//imagetalkr[akina_nutoral]{
いろんな技術本がでてますね。
//}

//imagetalkl[mai_nutoral]{
うんそうだね。ちなみに何冊か読んだことある？
//}


//imagetalkr[akina_iyaa]{
いやまだないです
//}

//imagetalkl[mai_nutoral]{
まあそうだよね。私もプロジェクトマネジメントの立場になるかもっていう時になってから読んだし。このプロジェクトマネジメント、話し出せば一晩中それどころか一週間一か月たっても話は尽きないかな。いろんな考え方があるんだ。そんな中で今回紹介したいのはウォーターフォールとアジャイルだ
//}

//imagetalkr[akina_nutoral]{
どちらも研修で名前は聞きました。
//}

//imagetalkl[mai_nutoral]{
ちなみに OJT ではどっちのプロジェクトだったの？
//}

//imagetalkr[akina_nutoral]{
ウォーターフォールだったそうです
//}

//imagetalkl[mai_niko]{
 OK じゃあウォーターフォールについて改めて説明していこう。
//}




== ウォーターフォール開発




//imagetalkl[mai_nutoral]{
ウォーターフォールっていうのは日本の商習慣だと古くからある開発手法だね。要件定義 、基本設計、詳細設計、実装、単体テスト、結合テスト、システムテスト、ユーザー受入テストの8段階に Project を分解して各段階ごとの時間と成果物を定義する。そしてこの段階を順を追って作業していくことから滝が落ちる様に例えて「ウォーターフォール」と名前が付けられてる。
//}

//image[waterfall][][scale=1]

//imagetalkr[akina_nutoral]{
なんとなく思い出してきました。
//}

//imagetalkl[mai_nutoral]{
実際に仕事してると意識するのは段階が変わるタイミングだけだからね。改めてだけどこのウォーターフォール一番の特徴は次の段階は前の段階が終わってからじゃないと進めないっていうところだね。
//}

//imagetalkr[akina_ettu]{
あれ、一番の特徴って、それなんですか?
//}

//imagetalkl[mai_nutoral]{
うん、そうだね.
//}

//imagetalkr[akina_ettu]{
うー－ん、そうだったかなぁ
//}

//imagetalkl[mai_subara]{
というと？
//}

//imagetalkr[akina_nutoral]{
いや、プロジェクトの中で私がテストをやっている間に他の人が仕様の確認をしてたら結局お客さんにまで確認しに行って実装のし直しをするっていうのをやっていたので、てっきり遡れるものだと思ってました。
//}

//imagetalkl[mai_uun]{
あーーー、実際そうだよね。私もよく見るよ。滝をさかのぼってく鯉。
//}

//imagetalkr[akina_iyaa]{
鯉って、なんですか。竜にでもなるんですか
//}


//imagetalkl[mai_dahaha]{
あっはっは！なれたらいいねー！
//}

//imagetalkr[akina_ugee]{
なれたらいいねじゃないですよ・・どういう気持ちで観てるんですか
//}

//imagetalkl[mai_nutoral]{
いやまぁ実際そういうところに突っ込んで行く人ほど成長することはあると思うよ。
//}

//imagetalkr[akina_ooo]{
おお
//}

//imagetalkl[mai_tohoho]{
つぶれちゃわないか心配だけど
//}

//imagetalkr[akina_ugee]{
怖い
//}

//imagetalkl[mai_nutoral]{
とまぁそんなことは置いといてこの ウォーターフォールには問題がある。さっき言ったように定義に抜け漏れがあるとどうしても滝を遡らなければいけないことが起きる。これは古来多くの人々が挑戦し、ぶつかってきた大きな壁だ。 ウォーターフォールの存在にとって切っても切れない問題だと言ってもいい。
//}

//imagetalkr[akina_nutoral]{
そんなに頻繁に起きるんですか。
//}

//imagetalkl[mai_nutoral]{
頻繁に起きる。でもどちらかと言うと「今まで暗闇の中を歩いてきたけれどウォーターフォールによって灯火を得た、その途端自分の足場がとてつもなく危険なものだと気づいてしまった」そんな感覚なんだと思う。
//}

//imagetalkr[akina_nutoral]{
なるほど。見えるからこその苦労なんですね。
//}

//imagetalkl[mai_nutoral]{
そうだね。それに結局、見えていようと見えてなかろうと、険しい足場に足を取られることはあるからね。しっかり照らして注意することは大事だし、万が一のことを考えて余力を残せるようにするのがマネジメントだし、ウォーターフォールのあり方だね。んでもって予想外の足の取られ方をするからプロジェクトが炎上するわけだ。
//}

//imagetalkr[akina_nutoral]{
わたしのこの間のプロジェクトが炎上しなくてよかったです。
//}

//imagetalkl[mai_nutoral]{
きっとリーダーが優秀だったんだよ。今度会ったら改めてお礼しないとだね。
//}

//imagetalkr[akina_nutoral]{
はい！
//}


== アジャイル開発

//imagetalkl[mai_nutoral]{
では改めて、予想外の足の取られ方をして痛い目を見るウォーターフォールの欠点を改善するべく生まれたのがアジャイルだ。
//}

//imagetalkr[akina_nutoral]{
なんとなく新しい手法ってイメージがあります
//}

//imagetalkl[mai_nutoral]{
そうだね日本の IT商習慣の中では比較的新しい部類だ。でもこのアジャイル生まれは2001年。20年選手と結構なベテランなんだよ。
//}

//imagetalkr[akina_ettu]{
そうなんですか！知りませんでした。
//}

//imagetalkl[mai_nutoral]{
私も初めて知った時は驚いたね。 んで、このアジャイルが何かっていうと、設計、実装、テスト、評価の四段階を繰り返して、ほしいものを形作っていくスタイルだ。このサイクルをスプリントと言われる短い周期のゴールごとに達成して最終的な成果物を作っていく。
//}

//image[agile][][scale=1]

//imagetalkr[akina_ooo]{
あの、ちょっといいですか？
//}

//imagetalkl[mai_ahaha]{
どうぞ
//}

//imagetalkr[akina_ettu]{
今聞いただけで疑問というか不安というか。そもそも、短い周期で作れるような物が仕事で来るとは思えないんですけど。
//}

//imagetalkl[mai_nutoral]{
確かに。その疑問は最もだね。その問でいうと、「最小単位で最も重要な物から作る」が
答えだ。
//}


//imagetalkr[akina_nutoral]{
なるほど、小さい部分だけなら切り出すことができるかもしれませんね。でも、それってどうやって絞りだすんですか？
//}

//imagetalkl[mai_niko]{
いい質問だ。結論から言うと結局ウォーターフォールでいう要件定義というようなフェーズは存在する。 その要件定義の中で重要度や実装難易度も含め最も重要なものを順序付けていく。
//}

//imagetalkr[akina_nutoral]{
必要な物が要件定義のときにすっぽ抜けていたらどうするんですか？
//}

//imagetalkl[mai_niko]{
それもいい質問だ。 逆に言うとアジャイルはそのような状況のために特化しているとも言える。 
//}

//imagetalkr[akina_nutoral]{
どういうことですか？
//}

//imagetalkl[mai_nutoral]{
さっき、アジャイルは設計、実装、テスト、評価の4段階を回していくっていったよね。実はこのサイクルが一周回るごとに必要によって新たな要件を定義して次の実装から手をつけていけるようになっているんだ。
//}

//imagetalkr[akina_nutoral]{
アジャイルにおける設計は要件定義も含んでるってことですか?
//}

//imagetalkl[mai_nutoral]{
うん。そう考えていいよ。
//}

//imagetalkr[akina_nutoral]{
そうか、それなら毎回出来上がったものをお客さんに見せて、足りないとなったものを順々に足していけばいいんですね。
//}

//imagetalkl[mai_nutoral]{
そういうこと。どう？これだけでもアジャイルのすごさ伝わってこない？
//}

//imagetalkr[akina_hee]{
すごいです。私のプロジェクトでもやってほしかった。
//}

//imagetalkl[mai_nutoral]{
そうだよね。うちの会社もアジャイルの導入はまだまだだから、私たちみたいなのがどんどん声を上げて変えていかなきゃなんだけどね。
//}

//imagetalkr[akina_komari]{
が、、頑張ります。
//}

//imagetalkl[mai_dahaha]{
ははは！がんばろう、がんばろう！じゃ、そのすてきなアジャイルをもう少し詳しく見ていこう！
//}

//imagetalkr[akina_ooo]{
え、まだあるんですか？
//}

//imagetalkl[mai_nutoral]{
今教えたのはアジャイルの目的というか信念というか、方針みたいなものだから、それをどう実現するかはまた別の知識が必要なんだよ。
//}

//imagetalkr[akina_niko]{
なるほど。ではお願いします！
//}

=== スプリント

//imagetalkl[mai_ahaha]{
よろしい。じゃ、さっき話した４段階のサイクルだけど、これは大体２週間〜４週間ぐらいの時間単位、「スプリント」というモノに沿って一周していくことになる。
//}

//imagetalkr[akina_komari]{
やっぱり結構短いんですね。
//}

//imagetalkl[mai_nutoral]{
そうだね。ちなみに聞いた話では、スプリントの期間を一日にしているプロジェクトもあるらしいよ。
//}

//imagetalkr[akina_eee]{
１日！？そんなの絶対ついていけない・・・
//}

//imagetalkl[mai_dahaha]{
もちろんものすごいレアケースだよ。あきなちゃんがウォーターフォールでやってた時はプロジェクト全体でどれくらいかかってたのかな？
//}

//imagetalkr[akina_nutoral]{
私が入ったときはだいぶ後半で、全体だと１年半だったそうです。
//}

//imagetalkl[mai_nutoral]{
ふむ。標準的な長さの部類だね。大体のウォーターフォールプロジェクトは半年から３年といわれるから、アジャイルの開発単位がいかに小さいかがわかる。
//}

//imagetalkr[akina_nutoral]{
でも、最初の一番大事なところを作るのは、小さい部分とはいえ２週間は短いですね。
//}

//imagetalkl[mai_nutoral]{
	そうだねぇ。実際にアジャイルをやると最初の土台をつくるスプリントのことを「スプリントゼロ」と呼んで、後段のスプリントよりも長い時間を取ることもあるんだ。やっぱり難しいことはみんなわかってるんだよね。
//}

//imagetalkr[akina_niko]{
なんか響きがかっこいいですね。
//}

//imagetalkl[mai_ahaha]{
あはは！たしかに！と、まぁそれは置いといて、このスプリントゼロも含めたすべてのスプリントで「実際に動くもの」の成果を出すことが義務付けられているんだ。
//}

//imagetalkr[akina_ettu]{
え！？動くものですか？サイトとかアプリとかの？
//}

//imagetalkl[mai_nutoral]{
そう！サイトやアプリ、APIなど、可能であれば視覚的に評価が可能なものが好ましいといわれてるね。そしてその場でデモができることもほぼ必須なんだ。
//}

//imagetalkr[akina_eee]{
めちゃくちゃハードじゃないですか！
//}

//imagetalkl[mai_tohoho]{
めちゃくちゃハード。アジャイルになれば開発が楽になるって単純に考えてる人なら血涙を流すだろうねぇ。
//}

//imagetalkr[akina_ugee]{
怖すぎる・・・
//}

//imagetalkl[mai_nutoral]{
スプリントゼロならなおさらだね。その分、のちのスプリントは2週間だけど、スプリントゼロは６週間かけるってケースもあるみたいだね。6週間あれば何かは作れそうじゃない？
//}

//imagetalkr[akina_nutoral]{
うーーん、そう言われたら確かに。一ヶ月半かけて何もできないのはちょっとおかしいですもんね。
//}

//imagetalkl[mai_nutoral]{
うん、そうだね。ちなみに相場だとスプリントゼロの期間の長さは通常スプリントの2倍なケースが多いらしい。長すぎてもダメなんだって。
//}

//imagetalkr[akina_ooo]{
そういうこともあるんですか。
//}

//imagetalkl[mai_nutoral]{
まあ、ネットでアジャイル推進活動している知人にちょっと聞いただけなんだけどね。
//}

//imagetalkr[akina_komari]{
(知り合いに推進活動している人がいるって、このひといったい何者なんだ・・・)
//}

//imagetalkl[mai_nutoral]{
じゃあ、改めてスプリントゼロを含めたスプリントの説明だ。スプリントゼロの成果物時点で動くものができていればそれ以降のスプリントでは既存の成果物に成果を積み増しするだけで実際に動く成果物が出来上がってくるはずだ。そうだよね？
//}

//imagetalkr[akina_hee]{
はい。そのはずです。
//}

//imagetalkl[mai_nutoral]{
じゃあ、その後のスプリントはスプリントゼロに比べれば比較的気楽に作っていけるよね？
//}

//imagetalkr[akina_hee]{
そうだと思います。
//}

//imagetalkl[mai_niko]{
よーしその調子だ。あと、毎回のスプリントごとにできたものを評価するスプリントレビューと、作業者としての所感を振り返るスプリントレトロスペクティブというものが存在する。
//}

//imagetalkr[akina_ooo]{
スプリントレトロスペクティブ？所感の振り返りって必要なんですか？
//}

//imagetalkl[mai_nutoral]{
実はこれがとっても重要。製品としての評価はスプリントレビューで済ませるんだけど、作業者一人一人が「何をできたのか」「何をできなかったのか」「これから何をすべきか」を振り返る場所を設けるんだ。この振り返りによって作業への愛着、作業者としての自信、チームとしての連帯感を積み増して行くことができる。
//}

//imagetalkr[akina_nutoral]{
そ、そんなに変わるんですかね。
//}

//imagetalkl[mai_nutoral]{
実際にやってみると痛いほどに実感するよ。自分がやってきたことを振り返って肯定するチャンスはこのスプリントレトロスペクティブがないととても少なくなってしまうんだよね。
//}

//imagetalkr[akina_nutoral]{
そうなんですか。実際にやった人がそうなら、そうなのかもしれません。
//}

//imagetalkl[mai_niko]{
ま、こればっかりは習うより慣れろだね！アジャイルプロジェクトに配属されることを祈ろう！
//}

//imagetalkr[akina_iyasono]{
うう・・・その運は自信がないです。
//}

//imagetalkl[mai_dahaha]{
あはは！上司に何度も言ってけばそのうち何とかなるよ！
//}

//imagetalkr[akina_tahaha]{
頑張ってみます。
//}

=== バックログ

//imagetalkl[mai_nutoral]{
さて、ここまででスプリントについて学んだけど、実際にスプリントの中で作っていくものについて考えてみよう。スプリントゼロでお客さんの求めるものの必要最小限を作ったとする、そのあとのスプリントでは何を作っていけばいいかな？
//}

//imagetalkr[akina_nutoral]{
えっと、毎回のスプリントの終わりにお客さんに聞き込みをするんじゃないですか？
//}

//imagetalkl[mai_nutoral]{
うーん、半分正解かな。
//}

//imagetalkr[akina_nutoral]{
半分ですか。
//}

//imagetalkl[mai_nutoral]{
考えてみよう。毎回のスプリント事にお客さんの話を聞いてモノを作っていったら、生まれてきた成果物にお客さんのテンションが上がって「本質的には必要のないかっこいいもの」ばっかりが注文されたらどうしよう？お客さんはノリノリでプログラマーのみんなもかっこいいものを作るならまんざらでもない顔をしている。
//}

//imagetalkr[akina_nutoral]{
かっこいいのはいいんですけど、本質的じゃないなら作っちゃダメな気がします。
//}

//imagetalkl[mai_nutoral]{
そうだよね。最初に良いプロジェクトについて考えた時に出た答えは「成果のための時間を正しい労働力で働き切って正しい成果を得る」だったからね。どれだけかっこよくても、もともとの目標を達成するのに片手落ちではいけないんだ。
//}

//imagetalkr[akina_nutoral]{
でも、じゃあどうするんです？お客さんが納得しないとそれもプロジェクトとしては失敗なんじゃないですか？
//}

//imagetalkl[mai_nutoral]{
重要なのはお客さんも我々作り手も常に初心にかえって、「そもそも何がほしいか、作りたいか」を振り返り続けることだ。そのためには、常に振り返れる資料が必要だ。
//}

//imagetalkr[akina_nutoral]{
何かのメモを残すとか？
//}

//imagetalkl[mai_nutoral]{
そう！だけどただのメモじゃいけない。何をしたいか、そのために何が必要か、そしてそのためのパーツには何が必要か、みたいに根本の目的に結びづく芋づる式の実現手法のメモが好ましい。この点をカバーして考案されたのが「バックログ」だ。
//}

//imagetalkr[akina_nutoral]{
バックログって聞くとすごいシンプルな単語に思えますね。
//}

//imagetalkl[mai_nutoral]{
まあ、元がシンプルなメモから派生してるからね。んで、このバックログにも種類がある。作りたいもの全体のやることをメモしておく「プロダクトバックログ」と、スプリント毎にやることを絞り込む「スプリントバックログ」だ。
//}

//imagetalkr[akina_nutoral]{
二つ作るんですね。
//}

//imagetalkl[mai_nutoral]{
厳密にはスプリントバックログはプロダクトバックログの一部を絞り込んだモノだね。最初にプロダクトバックログを作って方向性をお客さんと一緒に確認する。そのあと、スプリントごとにスプリントバックログを絞り込んで開発して、スプリントの終わりにできたこと、全体の方向性、次のスプリントバックログを確認してプロジェクトを進めていくんだ。
//}

//imagetalkr[akina_ooo]{
質問です。
//}

//imagetalkl[mai_ahaha]{
はい。どうぞ。
//}

//imagetalkr[akina_nutoral]{
スプリントの開発中に「どうしてもやらなきゃいけないけどバックログにこの内容ないや」っていうときはどうするんですか？
//}

//imagetalkl[mai_niko]{
いい質問だね。答えはバックログの管理者に連絡して「このタスクをバックログに追加してください」って伝えてから手をつける。管理者はそのタスクをプロダクトバックログとスプリントバックログに追加する。これはとっても重要だ。
//}

//imagetalkr[akina_nutoral]{
やっぱりバックログを管理する側も一つずつ把握したいんですかね？
//}

//imagetalkl[mai_nutoral]{
そうだね。スプリントは短いから誰が何をしたかを確認するために管理者はバックログと実作業に乖離が出ないように特に気をつけなきゃいけないんだ。ちなみにタスクの管理方法に「カンバン」ってやりかたがあるんだけどそれを始めたての頃は大きなホワイトボードと付箋を使って誰が何をしているかを管理していたね。
//}

//imagetalkr[akina_ooo]{
ウォーターフォールからアジャイルに進んだはずなのに紙が登場するなんて意外です。
//}

//imagetalkl[mai_nutoral]{
まあウォーターフォールもいつまでたっても機能的じゃないエクセルに資料書き込んだりしてただけだしそこまで大差ないけどね。それにアジャイルに限らず近年注目されているリーン開発手法やデザイン思考とかのワークショップでも結局ホワイトボードと付箋は現役だね。
//}

//imagetalkr[akina_hee]{
へぇー。あ、最近聞いたMiroとかJumBoardってこのために使われてるんですか？
//}

//imagetalkl[mai_ahaha]{
そうそう！コロナが流行って対面ができなくなってからホワイトボードと付箋での機能を代替できるサービスが改めて注目を浴びるようになったよね！
//}

//imagetalkr[akina_niko]{
なるほど。友達が結構そういうツールの話をしていて、おいてかれている気持がしていたんですけどホワイトボード代わりに使ってただけなんですね。
//}

//imagetalkl[mai_dahaha]{
あはは！そうだよきっと！結局ホワイトボードの使い方がうまいかどうかなだけだと思うよ。いろんなワークの本読めばあきなちゃんも立派なMiro使いだ！
//}

//imagetalkr[akina_iyaa]{
いや、べつにそこまでやりたいわけでは・・・
//}

//imagetalkl[mai_ahaha]{
ふふ！冗談、冗談。それじゃあ、続き。このバックログは基本的にお客さんと一緒に作るんだ。
//}

//imagetalkr[akina_ooo]{
おお！そうなんですね。
//}

//imagetalkl[mai_nutoral]{
お客さんの中で作りたいものの要点を知ってる人を引っ張ってきて、あれこれ質問しながら必要な機能を搾りだして、やることリストを作ってカンバンやバックログ管理ツールに記入していく。
//}

//imagetalkr[akina_eee]{
んん？いまサクッて言いましたけど、それってとっても大変じゃないですか？
//}

//imagetalkl[mai_niko]{
気づいたかぁ。さすが！めちゃくちゃ大変。お客さんの本当に欲しいものを引き出すのもインタビューや様々な手法があって、これだけで方法論の一分野が出来上がっているし、抜けもれなく機能項目に落とし込むのも重要な技術だね。
//}

//imagetalkr[akina_ugee]{
うーーん、気が遠くなりそう。
//}

//imagetalkl[mai_nutoral]{
わかる。ちなみに私の知り合いは、聞き取りからバックログ作成まで一人でやっちゃうスーパーマンもいる。
//}

//imagetalkr[akina_ooo]{
ひぇー。すごい人がいるんですね。
//}

//imagetalkl[mai_dahaha]{
あっはっは。仕事しすぎて潰れちゃわないか心配だよ。まあ、なんにしろいろんな技術の結晶としてアジャイルのスタート地点のプロダクトバックログがあるわけだ。作り方についてより詳しく知りたいなら「デザイン思考」、「リーン開発手法」などで使用するワークやインタビューなどが良く援用されるから、そのあたりを見てみるといいね。
//}

//imagetalkr[akina_waa]{
なるほど！また勉強してみます。
//}

=== スクラム

//imagetalkl[mai_nutoral]{
ここまでアジャイル開発で一般的な用語のスプリントとバックログについて話してきたけど重要な要素が他にもある。その一つがスクラムだ。
//}

//imagetalkr[akina_nutoral]{
スクラムって、なんか何人かが肩を組んでるイメージがあります。
//}

//imagetalkl[mai_nutoral]{
アメフトの用語から来てるからね。そのイメージで正解だ。ただ、実際のところこのスクラムの意味合いはプログラマ同士が互いに支えあって開発するという意味合いが強い。
//}

//imagetalkr[akina_iyaa]{
エンジニアでイメージするとなんだか絵面がすごいことになりそうですが・・・でも皆で一緒にっていうのは素敵ですね
//}

//imagetalkl[mai_tohoho]{
アメフトも落ち着いて考えればすごい絵面だよ。みんなで支えあうのはもちろんとてもいいことだけどね。で、このスクラムは何をするかというと「お互いのやっている仕事を把握する」ことと「自ら進んでタスクに手をつける」、「成果をお互いに評価しあう」という3点だ。
//}

//imagetalkr[akina_ooo]{
んん？なんとなくアジャイルって言葉でイメージしてたのとほとんど同じのような・・・？あれ、違うか・・・？
//}

//imagetalkl[mai_nutoral]{
混乱するのも無理はないね。実際にスクラムがアジャイルに似ているように見えるのは「カンバン」の方式がスクラムにぴったりだからだよ。
//}

//imagetalkr[akina_ooo]{
え？ああ、そういうことか！「お互いのやっている仕事を把握する」「自ら進んでタスクに手をつける」「成果をお互いに評価しあう」の3点がカンバンにぴったりで、バックログをカンバンにすることで管理する側もプログラマもカンバンを見ながら状況が把握できる！
//}

//imagetalkl[mai_niko]{
そうそうそう！わかってきたねぇ、あきなちゃん！それがカンバンであり、アジャイルの本質の一つだよ。現にアジャイルの特徴として「カンバン」の存在を一番に挙げる人も多い。そもそも作業中はカンバンに書いてあることばっかりに集中するから作業者のイメージもカンバンが一番強いんだよね。
//}

//imagetalkr[akina_nutoral]{
なるほどー！って・・・んん・・・？待ってください。さっきスクラムの要点で「自ら進んでタスクに手をつける」って言ってましたよね？
//}

//imagetalkl[mai_nutoral]{
うん。言った。
//}

//imagetalkr[akina_ettu]{
これ、作業の内容がイメージできない人ってタスクに着手できなくないですか？
//}

//imagetalkl[mai_niko]{
お、鋭いね。そのとおり。
//}

//imagetalkr[akina_eee]{
そのとおりって・・・え！？どうすればいいんですか？？
//}

//imagetalkl[mai_tohoho]{
じつはスクラムやアジャイルの開発って実装作業者がそのタスクを実行できる実力をもってることが前提になってるんだよね。
//}

//imagetalkr[akina_eee]{
ええぇ！？
//}

//imagetalkl[mai_nutoral]{
なんならお客さんの要望から生まれてくるバックログを遂行するためにはプログラミングだけではなくインフラ知識やコード管理機能への深い理解など幅広い知識を持った「フルスタックエンジニア」が必要とされてる。
//}

//imagetalkr[akina_ugee]{
え、えええぇ。ここまで学んできたのに。これじゃぁ意味がないじゃないですかぁ。私そんな知識ないですよぉ。
//}

//imagetalkl[mai_niko]{
そうへこたれるでないぞ若者。実はアジャイル開発の初期からこの問題は指摘されていてそれを解決する方策も提示されてきている。
//}

//imagetalkr[akina_ettu]{
解決策があるんですか？？
//}

//imagetalkl[mai_ahaha]{
完璧ってほどでもないけど、実際の現場でエンジニアが育ち切ってなくても開発ができるように成長していくことを加味した開発手法が存在するんだ。
//}

//imagetalkr[akina_nutoral]{
それは・・なんですか？
//}

=== エクストリームプログラミング(XP)

//imagetalkl[mai_nutoral]{
アジャイル開発でフルスタックエンジニアが求められる局面において実際の作業者の実力が伴っていなくても開発を可能にする方策、その一つが「エクストリームプログラミング」というものだ。
//}

//imagetalkr[akina_eee]{
エクストリーム・・・ってただの「すごいプログラミング」とかなんじゃないですか？？？
//}

//imagetalkl[mai_oko]{
安心したまえ。内容を聞けば納得しうる内容だよ。
//}

//imagetalkr[akina_ugee]{
なんかさっきから胡散臭い人になってませんか？
//}

//imagetalkl[mai_dahaha]{
あっはっは！これ私の先輩の受け売りでさ！やってみたかったんだよね！
//}

//imagetalkr[akina_komari]{
そんな先輩がいるんですか・・・
//}

//imagetalkl[mai_ahaha]{
まぁまぁ、それじゃぁ内容に入るけど、このエクストリームプログラミング(通称、XP)はいくつかの特徴的な開発スタイルの総称だ。試しにペアプログラミングとモブプログラミングを挙げてみよう。
//}

==== ペアプログラミング

//imagetalkl[mai_nutoral]{
XPの方法論で有名なのはペアプログラミングというもので、二人一組でプログラミングを行うことを指すんだ。
//}

//imagetalkr[akina_nutoral]{
そのまんまの名前ですね。
//}

//imagetalkl[mai_nutoral]{
うん。ただ、決めごとがいくつかあるんだよね。交代する時間をきめる、実装しない方は実装する側のコードや組み立て方を観察してその時々もしくはレビュー時に実装者に伝えてディスカッションを行う、などがあるね。言い方やタイミングなどは当事者間でもっとも生産的な会話になるように事前に取り決めておくことが必要なんだ。
//}

//imagetalkr[akina_komari]{
誰かにプログラミングしてるの見られるの嫌ですね・・調べながらだし自信ないです。
//}

//imagetalkl[mai_ahaha]{
あはは！みんなそうだよ！逆に効率のいい調べ方や考え方を学べるからいい機会だよ！
//}

//imagetalkr[akina_ettu]{
そうなんですか？
//}

//imagetalkl[mai_ahaha]{
うん！結局生産性を高めるための取り組みだから、攻撃的な言葉にはならないはずだし、考えもしなかった知見が得られるからとっても勉強になるし、たのしいよ！
//}

//imagetalkr[akina_ooo]{
へぇ～そんなに楽しいならやってみてもいいかも！
//}

//imagetalkl[mai_dahaha]{
うん！うん！積極的にやっていこう！
//}

//imagetalkr[akina_ooo]{
あ、でも待ってください。あまりにレベルの低い人が実装していて、攻撃的にならないような注意ばっかりだと結局品質が下がっちゃうんじゃないですか？
//}

//imagetalkl[mai_nutoral]{
そういうケースもあり得るね。もちろん事前研修のような形で前提条件を覚えてから望むのがとても重要だ。でも結局はコミュニケーションをどうするか、そこが問題なんだ。事実XPではコミュニケーションの取り方についても深く言及しているんだよ。
//}

//imagetalkr[akina_ugee]{
なるほど、でも怖い人とペアになったら嫌です・・・
//}

//imagetalkl[mai_dahaha]{
あはは！その怖いのが実際の会話に出てるんなら悪いのはその人のコミュニケーション能力の不足だからリーダーとか上司に言うしかないね！
//}

//imagetalkr[akina_nutoral]{
そういうものなんですか
//}

//imagetalkl[mai_oko]{
なんなら私に言ってもいいよ！部長さんのとこに殴りこんでやる！
//}

//imagetalkr[akina_tahaha]{
えぇ、そこまでしなくていですよ・・(私も後輩にこれぐらい言えるようになりたいな・・)
//}

//imagetalkl[mai_niko]{
わたしも助けてもらった身だからね。後輩ちゃんのことはちゃんと守るよ
//}

//imagetalkr[akina_eee]{
まいさんもそんな目にあったことがあるんですか！？
//}

//imagetalkl[mai_dahaha]{
あはは！ほんのちょっとだけね！助けてくれた先輩はもう別の会社に行っちゃったけど、今でも憧れの先輩だなぁ。
//}

//imagetalkr[akina_hee]{
へぇ～、素敵な先輩なんですね。
//}

//imagetalkl[mai_ahaha]{
うん！最高の先輩の一人だね！っと、話の続き。このペアプロだけど
//}

//imagetalkr[akina_ooo]{
あ、すみません。単純な疑問です。
//}

//imagetalkl[mai_niko]{
どうぞ。
//}

//imagetalkr[akina_nutoral]{
二人で一つのプログラムを書くのって、効率下がったりしないんですか？
//}

//imagetalkl[mai_niko]{
うん、気になるよね。その点XPの推進者たちが自ら統計結果を出していて、確かに最初は効率が低いけど、最終的には個々のプログラムの品質が上がることによってテストやデバッグ期間が減り、全体的にコスト減、高品質化に繋がることが報告されているよ。
//}

//imagetalkr[akina_nutoral]{
そうなんですか。
//}

//imagetalkl[mai_subara]{
実際、人に何かを教えるときのほうが自分自身が見落としてたことに気づくことって多くない？
//}

//imagetalkr[akina_ooo]{
たしかに、人に教えようとすることで理解が深まることがありますね。
//}

//imagetalkl[mai_nutoral]{
そうそう。それに加えて二人でプログラミングすれば凡ミスも減る確率が下がるよね。
//}

//imagetalkr[akina_nutoral]{
そうですね。ベテランの人もそうやって納得してくれるならペアプログラミングもありなのかもしれません。
//}

//imagetalkl[mai_niko]{
アリだよ！大いにね！で、次はモブプログラミングだ。
//}

==== モブプログラミング

//imagetalkr[akina_nutoral]{
モブってことは大勢でプログラミングをするんですか？
//}

//imagetalkl[mai_niko]{
そうだね！誰かがプログラミングをするのを複数人で見守る形がモブプログラミングだ。
//}

//imagetalkr[akina_ugee]{
う・・・それって公開処刑じゃないですか？
//}

//imagetalkl[mai_dahaha]{
あはは！まぁプログラミングに自身がない人からしたらそうだよね！もちろん攻撃的に何かを言ってくる人はそのモブから除外するべきだけど、どうしても自信がついてからじゃないと難しいよね。
//}

//imagetalkr[akina_komari]{
はい・・・難しいです。
//}

//imagetalkl[mai_tohoho]{
実際私もメインで書いてる言語以外はやりたくないって思っちゃうなぁ。
//}

//imagetalkr[akina_tahaha]{
ですよね・・・まいさんは普段なんの言語を使ってるんですか？
//}

//imagetalkl[mai_nutoral]{
PythonとJavaScriptだね。
//}

//imagetalkr[akina_nutoral]{
なんか新しそうでうらやましいです。
//}

//imagetalkl[mai_dahaha]{
あっはっは！ぜぇぜぇ言いながら何とか間に合ってる程度だよ！
//}

//imagetalkr[akina_ooo]{
そうなんですか？
//}

//imagetalkl[mai_ahaha]{
そうだよ。特に私は一つの分野に腰を据えることが少ないから尚更。プロジェクトが変わるたびに戦々恐々で勉強してるよ。
//}

//imagetalkr[akina_ooo]{
そうなんですね。なんかイメージと違ってびっくりしました。
//}

//imagetalkl[mai_niko]{
ふふふ！まぁ余裕ありそうに見てもらえてるだけ、頑張ってるかいもあるってもんよ！
//}

//imagetalkr[akina_waa]{
私も頑張ります。
//}

//imagetalkl[mai_nutoral]{
モブプログラミングの話に戻るけど、確かにハードルは高い。でも、高くてもそれに見合うリターンが必ずあるんだ。
//}

//imagetalkr[akina_ooo]{
というのは・・・？
//}


//imagetalkl[mai_nutoral]{
	ある程度プログラミングが身について来ると書き癖というか、スタイルが決まってくる。変数名や関数名から始まってロジックの分解の仕方やクラスの設計なんかも少し癖が出てくるね。
//}

//imagetalkr[akina_ettu]{
癖ってそんなふうに出てきていいんですか？
//}

//imagetalkl[mai_niko]{
他の人が追記や改変に困らない程度なら全然いいと思うよ！それこそ読んだ本や育った組織ごとに癖があるのもよくあることだね。
//}

//imagetalkr[akina_nutoral]{
へぇ～、私はまだそういう癖みたいなものにであったことはないかもしれません。
//}

//imagetalkl[mai_nutoral]{
ところがどっこい、あきなちゃんのいたプロジェクトもコードを見れば誰が設計にかかわっているかわかってしまうかもしれないのだ。
//}

//imagetalkr[akina_nutoral]{
そ・・・そういうものなんですか。
//}

//imagetalkl[mai_nutoral]{
うん。よくある。で、その癖ややり方の違いが顕著に出てくるのがモブプログラミング。元々の育ちが違う人たちの意見がぶつかり合って新しい発見があるんだ。
//}

//imagetalkr[akina_ettu]{
ぶつかっちゃっていいんですか？
//}

//imagetalkl[mai_niko]{
いいんだよ！どちらかが正解のケースもあるし、そもそも正解のない話かもしれないし。そういうのを繰り返してプログラマーは強くなっていくんだ。
//}

//imagetalkr[akina_waa]{
なるほど・・私もいつかやってみたいです。
//}

//imagetalkl[mai_niko]{
その時は私も呼んでね！
//}

//imagetalkr[akina_waa]{
是非ともお願いします！
//}



